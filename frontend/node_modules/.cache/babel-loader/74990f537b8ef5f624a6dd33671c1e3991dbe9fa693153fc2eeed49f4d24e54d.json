{"ast":null,"code":"const handleSubmit = async e => {\n  e.preventDefault();\n\n  // Basic validation for required fields\n  if (!formData.name ||\n  // Updated from userName to name\n  !formData.email || !formData.password || !formData.cityId || !formData.customer.address || !formData.customer.adharNumber || !formData.customer.drivingLicenseNo || !formData.customer.contact) {\n    setErrorMessage(\"All fields are required.\");\n    return;\n  }\n\n  // Validation for adharNumber\n  const adharNumberPattern = /^\\d{16}$/;\n  if (!adharNumberPattern.test(formData.customer.adharNumber)) {\n    setErrorMessage(\"Aadhar Number must be a 16-digit integer.\");\n    return;\n  }\n  try {\n    setLoading(true); // Indicate loading state\n\n    // Send POST request to the REST API\n    const response = await axios.post(\"http://localhost:8080/register\", formData);\n    alert(\"Customer registered successfully!\");\n\n    // Clear the form after successful submission\n    setFormData({\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      cityId: \"\",\n      role: {\n        roleId: 2,\n        roleName: \"Customer\"\n      },\n      customer: {\n        city: {},\n        address: \"\",\n        adharNumber: \"\",\n        drivingLicenseNo: \"\",\n        contact: \"\"\n      }\n    });\n    setLoading(false); // End loading state\n  } catch (error) {\n    console.error(\"Registration failed\", error);\n\n    // Handle error message based on the API response or fallback\n    if (error.response && error.response.data && error.response.data.message) {\n      setErrorMessage(error.response.data.message);\n    } else {\n      setErrorMessage(\"Registration failed, please try again.\");\n    }\n    setLoading(false); // End loading state\n  }\n};","map":{"version":3,"names":["handleSubmit","e","preventDefault","formData","name","email","password","cityId","customer","address","adharNumber","drivingLicenseNo","contact","setErrorMessage","adharNumberPattern","test","setLoading","response","axios","post","alert","setFormData","role","roleId","roleName","city","error","console","data","message"],"sources":["C:/Users/hario/OneDrive/Documents/CarRentals/car-rental/src/components/Auth/CustomerRegister.js"],"sourcesContent":["const handleSubmit = async (e) => {\n  e.preventDefault();\n\n  // Basic validation for required fields\n  if (\n    !formData.name || // Updated from userName to name\n    !formData.email ||\n    !formData.password ||\n    !formData.cityId ||\n    !formData.customer.address ||\n    !formData.customer.adharNumber ||\n    !formData.customer.drivingLicenseNo ||\n    !formData.customer.contact\n  ) {\n    setErrorMessage(\"All fields are required.\");\n    return;\n  }\n\n  // Validation for adharNumber\n  const adharNumberPattern = /^\\d{16}$/;\n  if (!adharNumberPattern.test(formData.customer.adharNumber)) {\n    setErrorMessage(\"Aadhar Number must be a 16-digit integer.\");\n    return;\n  }\n\n  try {\n    setLoading(true); // Indicate loading state\n\n    // Send POST request to the REST API\n    const response = await axios.post(\n      \"http://localhost:8080/register\",\n      formData\n    );\n\n    alert(\"Customer registered successfully!\");\n\n    // Clear the form after successful submission\n    setFormData({\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      cityId: \"\",\n      role: { roleId: 2, roleName: \"Customer\" },\n      customer: {\n        city: {},\n        address: \"\",\n        adharNumber: \"\",\n        drivingLicenseNo: \"\",\n        contact: \"\",\n      },\n    });\n\n    setLoading(false); // End loading state\n  } catch (error) {\n    console.error(\"Registration failed\", error);\n\n    // Handle error message based on the API response or fallback\n    if (\n      error.response &&\n      error.response.data &&\n      error.response.data.message\n    ) {\n      setErrorMessage(error.response.data.message);\n    } else {\n      setErrorMessage(\"Registration failed, please try again.\");\n    }\n\n    setLoading(false); // End loading state\n  }\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAOC,CAAC,IAAK;EAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;;EAElB;EACA,IACE,CAACC,QAAQ,CAACC,IAAI;EAAI;EAClB,CAACD,QAAQ,CAACE,KAAK,IACf,CAACF,QAAQ,CAACG,QAAQ,IAClB,CAACH,QAAQ,CAACI,MAAM,IAChB,CAACJ,QAAQ,CAACK,QAAQ,CAACC,OAAO,IAC1B,CAACN,QAAQ,CAACK,QAAQ,CAACE,WAAW,IAC9B,CAACP,QAAQ,CAACK,QAAQ,CAACG,gBAAgB,IACnC,CAACR,QAAQ,CAACK,QAAQ,CAACI,OAAO,EAC1B;IACAC,eAAe,CAAC,0BAA0B,CAAC;IAC3C;EACF;;EAEA;EACA,MAAMC,kBAAkB,GAAG,UAAU;EACrC,IAAI,CAACA,kBAAkB,CAACC,IAAI,CAACZ,QAAQ,CAACK,QAAQ,CAACE,WAAW,CAAC,EAAE;IAC3DG,eAAe,CAAC,2CAA2C,CAAC;IAC5D;EACF;EAEA,IAAI;IACFG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;;IAElB;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAC/B,gCAAgC,EAChChB,QACF,CAAC;IAEDiB,KAAK,CAAC,mCAAmC,CAAC;;IAE1C;IACAC,WAAW,CAAC;MACVjB,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE,EAAE;MACVe,IAAI,EAAE;QAAEC,MAAM,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAW,CAAC;MACzChB,QAAQ,EAAE;QACRiB,IAAI,EAAE,CAAC,CAAC;QACRhB,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE,EAAE;QACfC,gBAAgB,EAAE,EAAE;QACpBC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;IAEFI,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;EACrB,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;;IAE3C;IACA,IACEA,KAAK,CAACT,QAAQ,IACdS,KAAK,CAACT,QAAQ,CAACW,IAAI,IACnBF,KAAK,CAACT,QAAQ,CAACW,IAAI,CAACC,OAAO,EAC3B;MACAhB,eAAe,CAACa,KAAK,CAACT,QAAQ,CAACW,IAAI,CAACC,OAAO,CAAC;IAC9C,CAAC,MAAM;MACLhB,eAAe,CAAC,wCAAwC,CAAC;IAC3D;IAEAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;EACrB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}